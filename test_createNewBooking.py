# Generated by Selenium IDE
# import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestCreateNewBooking():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_createNewBooking(self):
    # Test name: Create New Booking
    # Step # | name | target | value
    # 1 | open | https://qa-mtw-web.azurewebsites.net/staff/ | 
    self.driver.get("https://qa-mtw-web.azurewebsites.net/staff/")
    # 2 | setWindowSize | 1000x1000 | 
    self.driver.set_window_size(1000, 1000)
    # 3 | click | id=username | 
    self.driver.find_element(By.ID, "username").click()
    # 4 | type | id=username | bee-koon.tan@qornerstone.com
    self.driver.find_element(By.ID, "username").send_keys("bee-koon.tan@qornerstone.com")
    # 5 | click | id=password | 
    self.driver.find_element(By.ID, "password").click()
    # 6 | type | id=password | 7Ba@f92Kb9s/
    self.driver.find_element(By.ID, "password").send_keys("7Ba@f92Kb9s/")
    # 7 | sendKeys | id=password | ${KEY_ENTER}
    self.driver.find_element(By.ID, "password").send_keys(Keys.ENTER)
    # 8 | click | id=password | 
    self.driver.find_element(By.ID, "password").click()
    # 9 | type | id=password | 7Ba@f92Kb9s/
    self.driver.find_element(By.ID, "password").send_keys("7Ba@f92Kb9s/")
    # 10 | click | css=#btnlogin > .btn-arrow | 
    self.driver.find_element(By.CSS_SELECTOR, "#btnlogin > .btn-arrow").click()
    # 11 | click | css=.fa-angle-left:nth-child(1) | 
    self.driver.find_element(By.CSS_SELECTOR, ".fa-angle-left:nth-child(1)").click()
    # 12 | click | css=.d-inline-block | 
    self.driver.find_element(By.CSS_SELECTOR, ".d-inline-block").click()
    # 13 | mouseOver | css=.sliders-icon > span | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".sliders-icon > span")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 14 | waitForElementVisible | css=.col-lg-4:nth-child(2) .col-lg-4:nth-child(1) .white-box-link-a | 5000
    WebDriverWait(self.driver, 5).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".col-lg-4:nth-child(2) .col-lg-4:nth-child(1) .white-box-link-a")))
    # 15 | click | css=.col-lg-4:nth-child(2) .col-lg-4:nth-child(1) .white-box-link-a | 
    self.driver.find_element(By.CSS_SELECTOR, ".col-lg-4:nth-child(2) .col-lg-4:nth-child(1) .white-box-link-a").click()
    # 16 | click | id=add-new-poll-group | 
    self.driver.find_element(By.ID, "add-new-poll-group").click()
    # 17 | pause | 3000 | 
    time.sleep(3)
    # 18 | click | css=#containerselectblock .filter-option | 
    self.driver.find_element(By.CSS_SELECTOR, "#containerselectblock .filter-option").click()
    # 19 | waitForElementVisible | xpath=//a[contains(.,'37')] | 5000
    WebDriverWait(self.driver, 5).until(expected_conditions.visibility_of_element_located((By.XPATH, "//a[contains(.,\'37\')]")))
    # 20 | click | xpath=//a[contains(.,'37')] | 
    self.driver.find_element(By.XPATH, "//a[contains(.,\'37\')]").click()
    # 21 | pause | 3000 | 
    time.sleep(3)
    # 22 | click | xpath=//button[@title='Select Unit'] | 
    self.driver.find_element(By.XPATH, "//button[@title=\'Select Unit\']").click()
    # 23 | waitForElementVisible | xpath=//a[contains(.,'#06-02')] | 5000
    WebDriverWait(self.driver, 5).until(expected_conditions.visibility_of_element_located((By.XPATH, "//a[contains(.,\'#06-02\')]")))
    # 24 | click | xpath=//a[contains(.,'#06-02')] | 
    self.driver.find_element(By.XPATH, "//a[contains(.,\'#06-02\')]").click()
    # 25 | pause | 3000 | 
    time.sleep(3)
    # 26 | click | xpath=//button[@title='Select Resident'] | 
    self.driver.find_element(By.XPATH, "//button[@title=\'Select Resident\']").click()
    # 27 | click | xpath=//a[contains(.,'Tan Bee Koon')] | 
    self.driver.find_element(By.XPATH, "//a[contains(.,\'Tan Bee Koon\')]").click()
    # 28 | waitForElementPresent | css=#Test\ Facility\ 2 .thumb | 5000
    WebDriverWait(self.driver, 5).until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "#Test\\ Facility\\ 2 .thumb")))
    # 29 | click | css=#Test\ Facility\ 2 .thumb | 
    self.driver.find_element(By.CSS_SELECTOR, "#Test\\ Facility\\ 2 .thumb").click()
    # 30 | click | id=Jun-19-2025 | 
    self.driver.find_element(By.ID, "Jun-19-2025").click()
    # 31 | click | id=Regular-slots-3 | 
    self.driver.find_element(By.ID, "Regular-slots-3").click()
    # 32 | click | id=buttonbookslot | 
    self.driver.find_element(By.ID, "buttonbookslot").click()
    # 33 | click | css=.radio-type1 > div:nth-child(2) > label | 
    self.driver.find_element(By.CSS_SELECTOR, ".radio-type1 > div:nth-child(2) > label").click()
    # 34 | click | id=buttonbookingconfirm | 
    self.driver.find_element(By.ID, "buttonbookingconfirm").click()
    # 35 | waitForElementVisible | id=modalbookingconfirmyes | 5000
    WebDriverWait(self.driver, 5).until(expected_conditions.visibility_of_element_located((By.ID, "modalbookingconfirmyes")))
    # 36 | click | id=modalbookingconfirmyes | 
    self.driver.find_element(By.ID, "modalbookingconfirmyes").click()
    # 37 | pause | 3000 | 
    time.sleep(3)
    # 38 | click | css=.fa-angle-right:nth-child(1) | 
    self.driver.find_element(By.CSS_SELECTOR, ".fa-angle-right:nth-child(1)").click()
    # 39 | click | id=leftmenulogout | 
    self.driver.find_element(By.ID, "leftmenulogout").click()
    # 40 | click | id=buttonlogoutconfirm | 
    self.driver.find_element(By.ID, "buttonlogoutconfirm").click()
    # 41 | close |  | 
    self.driver.close()
  
doc_object = TestCreateNewBooking();

try: 
    doc_object.setup_method('')
    doc_object.test_createNewBooking()

finally:
    doc_object.teardown_method('')
